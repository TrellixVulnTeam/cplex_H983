<html xml:lang="en" lang="en" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>CP Methods</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="CP class, methods" />
    <meta name="Microsoft.Help.Id" content="Methods.T:ILOG.CP.CP" />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <link rel="stylesheet" type="text/css" href="../styles/Presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="../scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="../scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="../scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="../scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="../scripts/CommonUtilities.js"> </script>
    <meta name="container" content="ILOG.CP" />
    <meta name="file" content="Methods_T_ILOG_CP_CP" />
    <meta name="guid" content="Methods_T_ILOG_CP_CP" />
    <xml>
      <MSHelp:Attr Name="AssetID" Value="Methods.T:ILOG.CP.CP" />
      <MSHelp:TOCTitle Title="CP Methods" />
      <MSHelp:RLTitle Title="CP Methods (ILOG.CP)" />
      <MSHelp:Keyword Index="A" Term="Methods.T:ILOG.CP.CP" />
      <MSHelp:Keyword Index="A" Term="frlrfILOGCPCPMethodsTopic" />
      <MSHelp:Keyword Index="K" Term="CP class, methods" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLang" Value="VB" />
      <MSHelp:Attr Name="Locale" Value="en-us" />
      <MSHelp:Attr Name="TopicType" Value="kbSyntax" />
      <MSHelp:Attr Name="TopicType" Value="apiref" />
      <MSHelp:Attr Name="AssemblyVersion" Value="12.8.0.0" />
    </xml>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="CollapseAll image" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="ExpandAll image" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" alt="DropDown image" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" alt="DropDownHover image" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" />
    <div id="header">
      <table id="bottomTable" cellpadding="0" cellspacing="0">
        <tr id="headerTableRow1">
          <td align="left">
            <span id="runningHeaderText">CP Optimizer .NET Languages API</span>
          </td>
        </tr>
        <tr id="headerTableRow2">
          <td align="left">
            <span id="nsrTitle">CP Methods</span>
          </td>
        </tr>
        <tr id="headerTableRow3">
          <td align="left">
            <a href="T_ILOG_CP_CP.htm">CP Class</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('','CP Optimizer .NET Languages API','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');"></a></span></td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <span style="color: DarkGray"></span>
        <p>The <a href="T_ILOG_CP_CP.htm">CP</a> type exposes the following members.</p>
        <h1 class="heading">Methods</h1>
        <div id="methodTableSection" class="section" name="collapseableSection" style="">
          <table id="memberList" class="members" frame="lhs" cellpadding="2">
            <col width="10%" />
            <tr>
              <th class="iconColumn">
               
            </th>
              <th class="nameColumn">Name</th>
              <th class="descriptionColumn">Description</th>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AbortSearch.htm">AbortSearch</a>
              </td>
              <td>
                <div class="summary">This methods stops the current search and can be useful for interrupting the 
            CP solver in an iteractive application.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AddTuple.htm">AddTuple</a>
              </td>
              <td>
                <div class="summary">
            This method adds a tuple represented by the array <span class="code">array</span> to the tuple set <span class="code">ts</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AllDiff.htm">AllDiff</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new constraint stating that the expression elements of <span class="code">exps</span> must take
            different values from each other.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AllMinDistance.htm">AllMinDistance</a>
              </td>
              <td>
                <div class="summary">
            This method returns a constraint that ensures that the absolute distance between any pair of variables in the
            array <span class="code">vars</span> will be greater than or equal to <span class="code">k</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AllowedAssignments.htm">AllowedAssignments(IIntVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new constraint based on explicitly stating
            the allowed assignments (values) for a single expression.
            The argument <span class="code">values</span> specifies the allowed values of
            the expression <span class="code">exp</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AllowedAssignments_1.htm">AllowedAssignments(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntTupleSet)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new constraint based on explicitly stating the allowed assignments
            for a small group of variables. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Alternative.htm">Alternative(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an alternative constraint between interval variable <span class="code">a</span> and
            the set of interval variables in the array <span class="code">bs</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Alternative_1.htm">Alternative(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an alternative constraint between interval variable <span class="code">a</span> and
            the set of interval variables in the array <span class="code">bs</span> with cardinality <span class="code">c</span>.
            If <span class="code">a</span> is present, <span class="code">c</span> intervals in <span class="code">bs</span>
            will be selected by the alternative constraint.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Alternative_3.htm">Alternative(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an alternative constraint between interval variable <span class="code">a</span> and
            the set of interval variables in the array <span class="code">bs</span> with cardinality <span class="code">c</span>.
            If <span class="code">a</span> is present, <span class="code">c</span> intervals in <span class="code">bs</span>
            will be selected by the alternative constraint.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Alternative_5.htm">Alternative(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an alternative constraint between interval variable <span class="code">a</span> and
            the set of interval variables in the array <span class="code">bs</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Alternative_2.htm">Alternative(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntExpr, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an alternative constraint between interval variable <span class="code">a</span> and
            the set of interval variables in the array <span class="code">bs</span> with cardinality <span class="code">c</span>.
            If <span class="code">a</span> is present, <span class="code">c</span> intervals in <span class="code">bs</span>
            will be selected by the alternative constraint.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Alternative_4.htm">Alternative(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Int32, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an alternative constraint between interval variable <span class="code">a</span> and
            the set of interval variables in the array <span class="code">bs</span> with cardinality <span class="code">c</span>.
            If <span class="code">a</span> is present, <span class="code">c</span> intervals in <span class="code">bs</span>
            will be selected by the alternative constraint.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysConstant.htm">AlwaysConstant(IStateFunction, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that ensures that whenever
            interval variable <span class="code">a</span> is present state function
            <span class="code">f</span> is defined everywhere between the start and the end
            of interval variable <span class="code">a</span> and remains constant over this
            interval.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysConstant_2.htm">AlwaysConstant(IStateFunction, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that ensures that state
            function <span class="code">f</span> is defined everywhere on the interval
            <span class="code">[start,end)</span> and remains constant over this
            interval.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysConstant_1.htm">AlwaysConstant(IStateFunction, IIntervalVar, Boolean, Boolean)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that ensures that whenever
            interval variable <span class="code">a</span> is present state function
            <span class="code">f</span> is defined everywhere between the start and the end
            of interval variable <span class="code">a</span> and remains constant over this
            interval.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysConstant_3.htm">AlwaysConstant(IStateFunction, Int32, Int32, Boolean, Boolean)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that ensures that state
            function <span class="code">f</span> is defined everywhere on the interval
            <span class="code">[start,end)</span> and remains constant over this
            interval.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysEqual.htm">AlwaysEqual(ICumulFunctionExpr, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            interval variable <span class="code">a</span> is present, the value of cumul
            function expression <span class="code">f</span> should be always equal to
            <span class="code">v</span> between the start and the end of
            <span class="code">a</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysEqual_2.htm">AlwaysEqual(IStateFunction, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that ensures that whenever
            interval variable <span class="code">a</span> is present state function
            <span class="code">f</span> is defined everywhere between the start and the end
            of interval variable <span class="code">a</span> and remains equal to value
            <span class="code">v</span> over this interval.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysEqual_1.htm">AlwaysEqual(ICumulFunctionExpr, Int32, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that the value of
            cumul function expression <span class="code">f</span> should be always equal to
            <span class="code">v</span> between <span class="code">start</span> and
            <span class="code">end</span>. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysEqual_4.htm">AlwaysEqual(IStateFunction, Int32, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that ensures that state
            function <span class="code">f</span> is defined everywhere on the interval
            <span class="code">[start,end)</span> and remains equal to value <span class="code">v</span>
            over this interval.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysEqual_3.htm">AlwaysEqual(IStateFunction, IIntervalVar, Int32, Boolean, Boolean)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that ensures that whenever
            interval variable <span class="code">a</span> is present state function
            <span class="code">f</span> is defined everywhere between the start and the end
            of interval variable <span class="code">a</span> and remains equal to value
            <span class="code">v</span> over this interval.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysEqual_5.htm">AlwaysEqual(IStateFunction, Int32, Int32, Int32, Boolean, Boolean)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that ensures that state
            function <span class="code">f</span> is defined everywhere on the interval
            <span class="code">[start,end)</span> and remains equal to value <span class="code">v</span>
            over this interval.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysIn.htm">AlwaysIn(ICumulFunctionExpr, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            interval variable <span class="code">a</span> is present, the value of cumul
            function expression <span class="code">f</span> should be always within the
            range <span class="code">[vmin,vmax]</span> between the start and the end of
            <span class="code">a</span>. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysIn_2.htm">AlwaysIn(IStateFunction, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that ensures that whenever
            interval variable <span class="code">a</span> is present, the value of state
            function <span class="code">f</span>, if defined, remains in the range
            <span class="code">[vmin,vmax]</span> for any point <span class="code">t</span> between the
            start and the end of interval variable <span class="code">a</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysIn_1.htm">AlwaysIn(ICumulFunctionExpr, Int32, Int32, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that the value of
            cumul function expression <span class="code">f</span> should be always within
            the range <span class="code">[vmin,vmax]</span> between <span class="code">start</span> and
            <span class="code">end</span>. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysIn_3.htm">AlwaysIn(IStateFunction, Int32, Int32, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that ensures that, if it is
            defined, the value of state function <span class="code">f</span> remains in the
            range <span class="code">[vmin,vmax]</span> for any point <span class="code">t</span> in
            the interval of integers <span class="code">[start,end)</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysNoState.htm">AlwaysNoState(IStateFunction, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that ensures that whenever
            interval variable <span class="code">a</span> is present state function
            <span class="code">f</span> is undefined everywhere between the start and the
            end of interval variable <span class="code">a</span>. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_AlwaysNoState_1.htm">AlwaysNoState(IStateFunction, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that ensures that state
            function <span class="code">f</span> is undefined everywhere on the interval of
            integers <span class="code">[start,end)</span>. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ArrayEltName.htm">ArrayEltName</a>
              </td>
              <td>
                <div class="summary">
            This method is a shortcut to <span class="code">name.concat("[").concat(String.valueOf(index)).concat("]")</span></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Before.htm">Before</a>
              </td>
              <td>
                <div class="summary">This function returns a constraint that states that whenever
            both interval variables <span class="code">pred</span> and <span class="code">succ</span> are
            present, interval variable <span class="code">pred</span> must be ordered before
            interval variable <span class="code">succ</span> (but not necessarily
            immediately before) in the sequence variable <span class="code">seq</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ClearAbort.htm">ClearAbort</a>
              </td>
              <td>
                <div class="summary">This function should be called after <span class="code">AbortSearch</span> before any subsequent
            call to <span class="code">Solve</span> or <span class="code">StartNewSearch</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ClearExplanations.htm">ClearExplanations</a>
              </td>
              <td>
                <div class="summary">
            This method is used to clear the set of failure indices to be explained.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ClearStartingPoint.htm">ClearStartingPoint</a>
              </td>
              <td>
                <div class="summary">
             This method removes any starting point specified on the
             invoking CP Optimizer engine: subsequent searches will not use
             any starting point information, unless a new starting point is
             set.
            
             For more information on starting points, see the
             <em>Starting Point</em> concept.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Constant.htm">Constant(Double, String)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new constant expression equal to <span class="code">value</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Constant_1.htm">Constant(Int32, String)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new constant expression equal to <span class="code">value</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Count.htm">Count</a>
              </td>
              <td>
                <div class="summary">
            This function creates a new constrained integer expression equal to the number of variables in
            <span class="code">exprs</span> that are fixed to the value <span class="code">v</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_CountDifferent.htm">CountDifferent</a>
              </td>
              <td>
                <div class="summary">
            This function creates a new constrained integer expression equal to the number of different values assigned to the variables in
            <span class="code">exprs</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_CumulFunctionExpr.htm">CumulFunctionExpr<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">
            This method creates a constant cumul function expression everywhere equal to <span class="code">0</span>
             that the user can modify subsequently with the operators <span class="code">+=, -=</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_CumulFunctionExpr_1.htm">CumulFunctionExpr(String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates a constant cumul function expression everywhere equal to <span class="code">0</span>
            that the user can modify subsequently with the operators <span class="code">+=, -=</span>.
            You can specify a <span class="code">name</span> of your own choice.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Diff.htm">Diff</a>
              </td>
              <td>
                <div class="summary">
            This operator returns a cumul function expression equal to the difference of its arguments.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Distribute.htm">Distribute(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a counting constraint in a model. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Distribute_1.htm">Distribute(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a counting constraint in a model. The constraint has no effect until you add it to the CP
            solver. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Div_2.htm">Div(Int32, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the integer division <span class="code">e1 / e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Div.htm">Div(IIntExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the integer division <span class="code">e1 / e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Div_1.htm">Div(IIntExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the integer division <span class="code">e1 / e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_DomainMax.htm">DomainMax</a>
              </td>
              <td>
                <div class="summary">This function returns a variable evaluator. This evaluator returns the maximum value in the current domain of the variable.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_DomainMin.htm">DomainMin</a>
              </td>
              <td>
                <div class="summary">This function returns a variable evaluator.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_DomainSize.htm">DomainSize</a>
              </td>
              <td>
                <div class="summary">This function returns a variable evaluator. This evaluator returns the number of elements in the current domain of the evaluated variable.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_DumpModel.htm">DumpModel(TextWriter)</a>
              </td>
              <td>
                <div class="summary">
            Dumps the current model and internal data using TextWriter class.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_DumpModel_1.htm">DumpModel(String)</a>
              </td>
              <td>
                <div class="summary">
            Dumps the current model and internal data into a file.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Element_3.htm">Element(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new floating-point expression equal to <span class="code">values[index]</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Element_4.htm">Element(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new integer expression equal to <span class="code">values[index]</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Element_1.htm">Element(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new integer expression equal to <span class="code">exprs[index]</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Element.htm">Element(IIntExpr, IIntExpr, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">var == values[index]</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Element_2.htm">Element(INumExpr, IIntExpr, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">var == values[index]</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_End.htm">End</a>
              </td>
              <td>
                <div class="summary">
            Frees the memory ressources allocated by invoking CP Optimizer
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndAtEnd.htm">EndAtEnd(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be equal to <span class="code">0</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndAtEnd_1.htm">EndAtEnd(IIntervalVar, IIntervalVar, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndAtEnd_2.htm">EndAtEnd(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndAtStart.htm">EndAtStart(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be equal to <span class="code">0</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndAtStart_1.htm">EndAtStart(IIntervalVar, IIntervalVar, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndAtStart_2.htm">EndAtStart(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndBeforeEnd.htm">EndBeforeEnd(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">0</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndBeforeEnd_1.htm">EndBeforeEnd(IIntervalVar, IIntervalVar, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndBeforeEnd_2.htm">EndBeforeEnd(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndBeforeStart.htm">EndBeforeStart(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">0</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndBeforeStart_1.htm">EndBeforeStart(IIntervalVar, IIntervalVar, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndBeforeStart_2.htm">EndBeforeStart(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-end(a)</span>between the
            end of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndEval.htm">EndEval(IIntervalVar, INumToNumSegmentFunction)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a numerical expression that represents the
            value of function <span class="code">f</span> evaluated on the end of interval
            variable <span class="code">a</span> whenever the interval variable is
            present. When the interval variable is absent, it returns <span class="code">0</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndEval_1.htm">EndEval(IIntervalVar, INumToNumSegmentFunction, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a numerical expression that represents the
            value of function <span class="code">f</span> evaluated on the end of interval
            variable <span class="code">a</span> whenever the interval variable is
            present. When the interval variable is absent, it returns the
            constant numerical value <span class="code">absVal</span> (by default: 0).
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndOf.htm">EndOf(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the end
            of interval variable <span class="code">a</span> whenever the interval variable
            is present. When the interval variable is absent, it returns 
            <span class="code">0</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndOf_1.htm">EndOf(IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the end
            of interval variable <span class="code">a</span> whenever the interval variable
            is present. When the interval variable is absent, it returns the
            constant integer value <span class="code">absVal</span> (by default: 0).
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndOfNext.htm">EndOfNext(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            end of the interval variable that is next to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the last interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
            returns 0.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndOfNext_1.htm">EndOfNext(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            end of the interval variable that is next to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the last interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
            returns the constant integer value <span class="code">absVal</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndOfPrevious.htm">EndOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            end of the interval variable that is previous to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the first interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
            returns 0.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndOfPrevious_1.htm">EndOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            end of the interval variable that is previous to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the first interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
            returns the constant integer value <span class="code">absVal</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_EndSearch.htm">EndSearch</a>
              </td>
              <td>
                <div class="summary">
             This method terminates a search and deletes the
             internal objects created by CP to carry out the search.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Eq_2.htm">Eq(Int32, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">v == e</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Eq.htm">Eq(IIntExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e1 == e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Eq_1.htm">Eq(IIntExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e == v</span>.
            </div>
              </td>
            </tr>
            <tr data="public;inherited;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <span class="nolink">Equals</span>
              </td>
              <td>
                <div class="summary">Determines whether the specified <span class="nolink">Object</span> is equal to the current <span class="nolink">Object</span>.</div> (Inherited from <span class="nolink">Object</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Equiv.htm">Equiv</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">c1 &lt;=&gt; c2</span>, in which the two constraints c1 and c2 are
            equivalent.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Error.htm">Error</a>
              </td>
              <td>
                <div class="summary">Returns the error output stream of the invoking <span class="code">CP</span> object. This stream is used by <span class="code">CP</span> for printing errors. It can be set with the method <span class="code">CP.SetError</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplainFailure.htm">ExplainFailure(Int32)</a>
              </td>
              <td>
                <div class="summary">
            This method specifies a tag (index) of the failure to explain. Several failures tags can be added.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplainFailure_1.htm">ExplainFailure(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method specifies an array of tags (indices) of failures to explain. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplicitValueEval.htm">ExplicitValueEval(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">This method is a shortcut to <span class="code">explicitValueEval(vals, evaluation, 0)</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplicitValueEval_2.htm">ExplicitValueEval(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">This method is a shortcut to <span class="code">explicitValueEval(vals, evaluation, 0)</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplicitValueEval_1.htm">ExplicitValueEval(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double)</a>
              </td>
              <td>
                <div class="summary">This function returns a value evaluator. The evaluations of elements of <span class="code">vals</span> are explicitly defined in the array of floating-point values <span class="code">evaluation</span>; that is, the evaluation of <span class="code">vals[i]</span> is <span class="code">evaluation[i]</span>. The arrays <span class="code">vals</span> and <span class="code">evaluation</span> must have the same size.  The evaluation of a value that does not appear in <span class="code">vals</span> is given by <span class="code">defaultEval</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplicitValueEval_3.htm">ExplicitValueEval(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double)</a>
              </td>
              <td>
                <div class="summary">This function returns a value evaluator.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplicitVarEval.htm">ExplicitVarEval(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method is a shortcut to <span class="code">explicitVarEval(vars, vals, 0)</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplicitVarEval_2.htm">ExplicitVarEval(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method is a shortcut to <span class="code">explicitVarEval(vars, vals, 0)</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplicitVarEval_1.htm">ExplicitVarEval(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a variable evaluator. The evaluation of variables from the array <span class="code">vars</span> are
            explicitly defined in the array of floating-point values <span class="code">vals</span>; that is, the evaluation of
            <span class="code">vars[i]</span> is <span class="code">vals[i]</span>.  The arrays <span class="code">vars</span> and <span class="code">vals</span> must have
            the same size. The evaluation of a variable that does not appear in the array is given by
            <span class="code">defaultEval</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExplicitVarEval_3.htm">ExplicitVarEval(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a variable evaluator. The evaluations of variables in the array <span class="code">vars</span> are
            explicitly defined in the array of integer values <span class="code">vals</span>; that is, the evaluation of
            <span class="code">vars[i]</span> is <span class="code">vals[i]</span>.  The arrays <span class="code">vars</span> and <span class="code">vals</span> must have the same size.
            The evaluation of a variable that does not appear in the array is given by <span class="code">defaultEval</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Exponent.htm">Exponent</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">exp(e)</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExportModel.htm">ExportModel(TextWriter)</a>
              </td>
              <td>
                <div class="summary">
             Exports the current model using TextWriter class.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ExportModel_1.htm">ExportModel(String)</a>
              </td>
              <td>
                <div class="summary">
             Exports the current model into a file.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_FalseConstraint.htm">FalseConstraint</a>
              </td>
              <td>
                <div class="summary">Creates and returns a new constraint that is always false.</div>
              </td>
            </tr>
            <tr data="protected;inherited;notNetfw;">
              <td>
                <img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" />
              </td>
              <td>
                <span class="nolink">Finalize</span>
              </td>
              <td>
                <div class="summary">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</div> (Inherited from <span class="nolink">Object</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_First.htm">First</a>
              </td>
              <td>
                <div class="summary">This function returns a constraint that states that whenever
            interval variable <span class="code">a</span> is present, it must be ordered
            first in the sequence variable <span class="code">seq</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Floor.htm">Floor</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new expression.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ForbiddenAssignments.htm">ForbiddenAssignments(IIntVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new constraint based on explicitly stating
            the forbidden assignments (values) for a single expression.
            The argument <span class="code">values</span> specifies the forbidden values of
            the expression <span class="code">exp</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ForbiddenAssignments_1.htm">ForbiddenAssignments(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntTupleSet)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new constraint based on explicitly stating the forbidden assignments
            for a small group of variables. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ForbidEnd.htm">ForbidEnd</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            interval variable <span class="code">a</span> is present, it cannot end at a
            value <span class="code">t</span> such that <span class="code">f(t-1)=0</span>. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ForbidExtent.htm">ForbidExtent</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            interval variable <span class="code">a</span> is present, it cannot contain a
            value <span class="code">t</span> such that <span class="code">f(t)=0</span>. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ForbidStart.htm">ForbidStart</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            interval variable <span class="code">a</span> is present, it cannot start at a
            value <span class="code">t</span> such that <span class="code">f(t)=0</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Ge_5.htm">Ge(Int32, ICumulFunctionExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that the value of cumul function expression
            <span class="code">f</span> should never be greater than <span class="code">vmax</span>.
            </div> (Overrides <span class="nolink">IloModelerImplGe(Int32, ICumulFunctionExpr)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Ge_6.htm">Ge(Int32, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">v &gt;= e</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Ge.htm">Ge(ICumulFunctionExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that the value of cumul function expression
            <span class="code">f</span> should never be less than <span class="code">vmin</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Ge_1.htm">Ge(ICumulFunctionExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that the value of cumul function expression
            <span class="code">f</span> should never be less than <span class="code">vmin</span>.
            </div> (Overrides <span class="nolink">IloModelerImplGe(ICumulFunctionExpr, Int32)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Ge_2.htm">Ge(IIntExpr, ICumulFunctionExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that the value of cumul function expression
            <span class="code">f</span> should never be greater than <span class="code">vmax</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Ge_3.htm">Ge(IIntExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e1 &gt;= e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Ge_4.htm">Ge(IIntExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e &gt;= v</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetAllConstrainedICumulFunctionExprs.htm">GetAllConstrainedICumulFunctionExprs</a>
              </td>
              <td>
                <div class="summary">
             Gets all cumul functions in the current model.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetAllIIntervalSequenceVars.htm">GetAllIIntervalSequenceVars</a>
              </td>
              <td>
                <div class="summary">
             Gets all interval sequence variables in the current model.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetAllIIntervalVars.htm">GetAllIIntervalVars</a>
              </td>
              <td>
                <div class="summary">
             Gets all interval variables in the current model.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetAllIIntVars.htm">GetAllIIntVars</a>
              </td>
              <td>
                <div class="summary">
             Get all integer variables in the current model.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetAllIStateFunctions.htm">GetAllIStateFunctions</a>
              </td>
              <td>
                <div class="summary">
             Gets all state functions in the current model.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetConflict.htm">GetConflict(IConstraint)</a>
              </td>
              <td>
                <div class="summary">
             This function returns the conflict status for a given constraint <span class="code">cst</span>.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetConflict_1.htm">GetConflict(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
             This function returns the conflict status for a given interval 
             variable <span class="code">var</span>.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetConflict_2.htm">GetConflict(INumVar)</a>
              </td>
              <td>
                <div class="summary">
             This function returns the conflict status for a given numerical 
             variable <span class="code">var</span>.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetDomain.htm">GetDomain</a>
              </td>
              <td>
                <div class="summary"> This method returns the current domain of interval variable <span class="code">a</span> as maintained by the
            invoking instance of <span class="code">CP</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetDomainSize.htm">GetDomainSize</a>
              </td>
              <td>
                <div class="summary">
            This method returns the size of the domain of variable <span class="code">var</span> as maintained in the invoking
            instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>. An assertion is violated if <span class="code">var</span> is not of integral type.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetEnd_1.htm">GetEnd(String)</a>
              </td>
              <td>
                <div class="summary">
             Returns the current end time of the interval variable with the specified name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetEnd.htm">GetEnd(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary"> This method returns the current value of the end of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>. An assertion 
             is violated if <span class="code">a</span> is not fixed.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetEndMax.htm">GetEndMax</a>
              </td>
              <td>
                <div class="summary"> This method returns the maximum value for the end of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetEndMin.htm">GetEndMin</a>
              </td>
              <td>
                <div class="summary"> This method returns the minimum value for the end of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetFirst.htm">GetFirst</a>
              </td>
              <td>
                <div class="summary">This method assumes that interval sequence variable <span class="code">seq</span> is fixed.
            It returns the interval variable at the first position in the sequence.</div>
              </td>
            </tr>
            <tr data="public;inherited;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <span class="nolink">GetHashCode</span>
              </td>
              <td>
                <div class="summary">Serves as a hash function for a particular type. </div> (Inherited from <span class="nolink">Object</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetICumulFunctionExpr.htm">GetICumulFunctionExpr</a>
              </td>
              <td>
                <div class="summary">
             Finds a cumulative function expression in the current model by its name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetIIntervalSequenceVar.htm">GetIIntervalSequenceVar</a>
              </td>
              <td>
                <div class="summary">
             Finds an interval sequence variable in the current model by its name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetIIntervalVar.htm">GetIIntervalVar</a>
              </td>
              <td>
                <div class="summary">
             Finds an interval variable in the current model by its name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetIIntVar.htm">GetIIntVar</a>
              </td>
              <td>
                <div class="summary">
             Finds an integer variable in the current model by its name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetInfo.htm">GetInfo(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>DoubleInfo)</a>
              </td>
              <td>
                <div class="summary">
            This method returns the value of the floating-point information <span class="code">which</span> in the invoked CP instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetInfo_1.htm">GetInfo(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>IntInfo)</a>
              </td>
              <td>
                <div class="summary">
            This method returns the value of the integer information <span class="code">which</span> in the invoked CP instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetIntValue.htm">GetIntValue</a>
              </td>
              <td>
                <div class="summary">
            This method returns the current value of the variable <span class="code">v</span> in the invoking instance of
            <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>. An assertion is violated if <span class="code">v</span> is not fixed to a value.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetIStateFunction.htm">GetIStateFunction</a>
              </td>
              <td>
                <div class="summary">
             Finds a state function in the current model by its name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetLast.htm">GetLast</a>
              </td>
              <td>
                <div class="summary">This method assumes that interval sequence variable <span class="code">seq</span> is fixed.
            It returns the interval variable at the last position in the sequence. </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetLength_1.htm">GetLength(String)</a>
              </td>
              <td>
                <div class="summary">
             Returns the current length of the interval variable with the specified name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetLength.htm">GetLength(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">This method returns the current value of the length of interval variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>. An assertion is violated if <span class="code">a</span> is not fixed.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetLengthMax.htm">GetLengthMax</a>
              </td>
              <td>
                <div class="summary">This method returns the maximum value for the length of interval variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetLengthMin.htm">GetLengthMin</a>
              </td>
              <td>
                <div class="summary">This method returns the minimum value for the length of interval variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetMax.htm">GetMax</a>
              </td>
              <td>
                <div class="summary">
            This method returns the maximum value of the variable <span class="code">v</span> in the invoking instance
            of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetMin.htm">GetMin</a>
              </td>
              <td>
                <div class="summary">
            This method returns the minimum value of the variable <span class="code">v</span> in the invoking instance
            of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetNext.htm">GetNext</a>
              </td>
              <td>
                <div class="summary">This method assumes that interval sequence variable <span class="code">seq</span> is fixed.
            It returns the interval variable that immediately follows interval <span class="code">a</span> in the sequence. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetNumberOfSegments.htm">GetNumberOfSegments(ICumulFunctionExpr)</a>
              </td>
              <td>
                <div class="summary">
             This method assumes that the cumul function expression
             <span class="code">f</span> is fixed. It returns the number of segments of the
             cumul function expression <span class="code">f</span>.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetNumberOfSegments_1.htm">GetNumberOfSegments(IStateFunction)</a>
              </td>
              <td>
                <div class="summary">
             This function assumes that state function
             <span class="code">f</span> is fixed. It returns the number of segments of the
             state function <span class="code">f</span>.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetObjBounds.htm">GetObjBounds</a>
              </td>
              <td>
                <div class="summary">
            This method returns the numeric values of all objective bounds 
            in a multi-objective function associated with the CP engine.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetObjGaps.htm">GetObjGaps</a>
              </td>
              <td>
                <div class="summary">
            This method returns the numeric values of all objective gaps
            in a multi-objective function associated with the CP engine.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetObjValues.htm">GetObjValues</a>
              </td>
              <td>
                <div class="summary">
            This method returns the numeric values of all objectives
            in a multi-objective function associated with the CP engine.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetParameter.htm">GetParameter(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>DoubleParam)</a>
              </td>
              <td>
                <div class="summary">
            This method returns the value of the floating-point parameter <span class="code">param</span> in the invoked <span class="code">CP</span>
            instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetParameter_1.htm">GetParameter(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>IntParam)</a>
              </td>
              <td>
                <div class="summary">
            This method returns the value of the integer parameter <span class="code">param</span> in the invoked <span class="code">CP</span>
            instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetParameterDefault.htm">GetParameterDefault(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>DoubleParam)</a>
              </td>
              <td>
                <div class="summary">
            This method returns the default value of the floating-point parameter <span class="code">param</span> in the invoked
            <span class="code">CP</span> instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetParameterDefault_1.htm">GetParameterDefault(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>IntParam)</a>
              </td>
              <td>
                <div class="summary">
            This method returns the default value of the integer parameter <span class="code">param</span> in the invoked
            <span class="code">IloCP</span> instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetPrev.htm">GetPrev</a>
              </td>
              <td>
                <div class="summary">This method assumes that interval sequence variable <span class="code">seq</span> is fixed.
            It returns the interval variable that immediately precedes interval <span class="code">a</span> in the 
            sequence.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetRandomInt.htm">GetRandomInt</a>
              </td>
              <td>
                <div class="summary">This method returns a pseudo-randomly generated integer value in the range [0..n).</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSegmentEnd.htm">GetSegmentEnd(ICumulFunctionExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function assumes that the cumul function expression
            <span class="code">f</span> is fixed. It returns the end of the
            <span class="code">i</span>th segment of the cumul function expression <span class="code">f</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSegmentEnd_1.htm">GetSegmentEnd(IStateFunction, Int32)</a>
              </td>
              <td>
                <div class="summary">
             This method assumes that state function
             <span class="code">f</span> is fixed. It returns the end of the
             <span class="code">i</span>th segment of the
             state function <span class="code">f</span>.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSegmentStart.htm">GetSegmentStart(ICumulFunctionExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function assumes that the cumul function expression
            <span class="code">f</span> is fixed. It returns the start of the
            <span class="code">i</span>th segment of the cumul function expression <span class="code">f</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSegmentStart_1.htm">GetSegmentStart(IStateFunction, Int32)</a>
              </td>
              <td>
                <div class="summary">
             This function assumes that state function
             <span class="code">f</span> is fixed. It returns the start of the
             <span class="code">i</span>th segment of the
             state function <span class="code">f</span>.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSegmentValue.htm">GetSegmentValue(ICumulFunctionExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function assumes that the cumul function expression
            <span class="code">f</span> is fixed. It returns the value of the
            <span class="code">i</span>th segment of the cumul function expression <span class="code">f</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSegmentValue_1.htm">GetSegmentValue(IStateFunction, Int32)</a>
              </td>
              <td>
                <div class="summary">
             This method assumes that state function
             <span class="code">f</span> is fixed. It returns the value of the
             <span class="code">i</span>th segment of the
             state function <span class="code">f</span>.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSize_1.htm">GetSize(String)</a>
              </td>
              <td>
                <div class="summary">
             Returns the current size of the interval variable with the specified name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSize.htm">GetSize(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">This method returns the current value of the size of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>. An assertion 
             is violated if <span class="code">a</span> is not fixed.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSizeMax.htm">GetSizeMax</a>
              </td>
              <td>
                <div class="summary">This method returns the maximum value for the size of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetSizeMin.htm">GetSizeMin</a>
              </td>
              <td>
                <div class="summary"> This method returns the minimum value for the size of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetStart_1.htm">GetStart(String)</a>
              </td>
              <td>
                <div class="summary">
             Returns the current start time of the interval variable with the specified name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetStart.htm">GetStart(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">This method returns the current value of the start of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>. An assertion 
             is violated if <span class="code">a</span> is not fixed.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetStartMax.htm">GetStartMax</a>
              </td>
              <td>
                <div class="summary">This method returns the maximum value for the start of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetStartMin.htm">GetStartMin</a>
              </td>
              <td>
                <div class="summary">This method returns the minimum value for the start of interval 
             variable <span class="code">a</span> in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;inherited;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <span class="nolink">GetType</span>
              </td>
              <td>
                <div class="summary">Gets the type of the current instance.</div> (Inherited from <span class="nolink">Object</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValue_6.htm">GetValue(String)</a>
              </td>
              <td>
                <div class="summary">
             Returns the current value of an integer variable with the specified name.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValue_1.htm">GetValue(IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            This method returns the current value of the expression <span class="code">expr</span> in the invoking instance of
            <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValue_2.htm">GetValue(IIntVar)</a>
              </td>
              <td>
                <div class="summary">
            This method returns the current value of the variable <span class="code">v</span> in the invoking instance of
            <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>. An assertion is violated if <span class="code">v</span> is not fixed to a value.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValue_3.htm">GetValue(INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            This method returns the current value of the expression <span class="code">expr</span> in the invoking instance of
            <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValue_4.htm">GetValue(INumVar)</a>
              </td>
              <td>
                <div class="summary">
            This method returns the current value of the variable <span class="code">v</span> in the invoking instance of
            <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>. An assertion is violated if <span class="code">v</span> is not fixed to a value.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValue.htm">GetValue(ICumulFunctionExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This method assumes that cumul function expression
            <span class="code">f</span> is fixed. It returns the value of the
            corresponding stepwise non-negative function at point
            <span class="code">t</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValue_5.htm">GetValue(IStateFunction, Int32)</a>
              </td>
              <td>
                <div class="summary">
             This method assumes that state function
             <span class="code">f</span> is fixed. It returns the value of the
             corresponding stepwise non-negative function at point
             <span class="code">t</span>.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValues.htm">GetValues(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method accepts an array of variables <span class="code">vars</span> and puts the corresponding values into the array
            <span class="code">vals</span>; the corresponding values come from the current solution of the invoking algorithm. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_GetValues_1.htm">GetValues(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method accepts an array of variables <span class="code">vars</span> and puts the corresponding values into the array
            <span class="code">vals</span>; the corresponding values come from the current solution of the invoking algorithm. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Gt_2.htm">Gt(Int32, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">v &gt;= e</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Gt.htm">Gt(IIntExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e1 &gt;= e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Gt_1.htm">Gt(IIntExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e &gt;= v</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_HasObjective.htm">HasObjective</a>
              </td>
              <td>
                <div class="summary">This method returns true if and only if the invoking CP solver
            has extracted a model involving an objective.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_HeightAtEnd.htm">HeightAtEnd(IIntervalVar, ICumulFunctionExpr)</a>
              </td>
              <td>
                <div class="summary">
            Whenever interval variable <span class="code">a</span> is present, this
            function returns an integer expression that represents the total
            contribution of the end of interval variable <span class="code">a</span> to
            the cumul function expression <span class="code">f</span>. When interval variable <span class="code">a</span> 
            is absent, this function returns <span class="code">0</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_HeightAtEnd_1.htm">HeightAtEnd(IIntervalVar, ICumulFunctionExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Whenever interval variable <span class="code">a</span> is present, this
            function returns an integer expression that represents the total
            contribution of the end of interval variable <span class="code">a</span> to
            the cumul function expression<span class="code">f</span>. When interval variable <span class="code">a</span> is 
            absent, this function
            returns a constant integer expression equal to <span class="code">absVal</span>
            (by default: 0).
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_HeightAtStart.htm">HeightAtStart(IIntervalVar, ICumulFunctionExpr)</a>
              </td>
              <td>
                <div class="summary">
            Whenever interval variable <span class="code">a</span> is present, this
            function returns an integer expression that represents the total
            contribution of the start of interval variable <span class="code">a</span> to
            the cumul function expression <span class="code">f</span>. When interval variable 
            <span class="code">a</span> is absent, this function returns <span class="code">0</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_HeightAtStart_1.htm">HeightAtStart(IIntervalVar, ICumulFunctionExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Whenever interval variable <span class="code">a</span> is present, this
            function returns an integer expression that represents the total
            contribution of the start of interval variable <span class="code">a</span> to
            the cumul function expression <span class="code">f</span>. 
            When interval variable <span class="code">a</span> is absent, this function
            returns a constant integer expression equal to <span class="code">absVal</span>
            (by default: 0).
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IfThenElse.htm">IfThenElse</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">(c1 =&gt; c2) &amp;&amp; (! c1 =&gt; c3)</span>, that is, if the
            first constraint is satisfied, it implies the second, and if it is violated, it implies the third.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ImpactOfLastBranch.htm">ImpactOfLastBranch</a>
              </td>
              <td>
                <div class="summary">This function returns a variable evaluator. The evaluation is the domain reduction that the last instantiation made by search has achieved on the evaluated variable. Values returned range from 0 to 1.0. If the value is close to zero then there wasn't much domain reduction on the evaluated variable during the last instantiation. If the value is close to one, the domain was reduced considerably.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Imply.htm">Imply</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code"> c1 =&gt; c2</span>, that is, the first constraint implies the
            other.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ImportModel.htm">ImportModel(Stream)</a>
              </td>
              <td>
                <div class="summary">
             Imports model from a stream.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ImportModel_1.htm">ImportModel(String)</a>
              </td>
              <td>
                <div class="summary">
             Imports model from a file.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalSequenceVar.htm">IntervalSequenceVar(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
             This method creates an instance of sequence variable on the set of interval variables
            defined by array <span class="code">a</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalSequenceVar_1.htm">IntervalSequenceVar(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an instance of sequence variable on the set of interval variables
            defined by array <span class="code">a</span>. An array of non-negative
            integer <span class="code">types</span> is specified. Arrays <span class="code">a</span> and <span class="code">types</span> must be of the same size and
            interval variable <span class="code">a[i]</span> will have type <span class="code">types[i]</span> in the sequence variable.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalSequenceVar_3.htm">IntervalSequenceVar(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an instance of sequence variable on the set of interval variables
            defined by array <span class="code">a</span>. You can specify a <span class="code">name</span> of your own choice.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalSequenceVar_2.htm">IntervalSequenceVar(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an instance of sequence variable on the set of interval variables
            defined by array <span class="code">a</span>. An array of non-negative
            integer <span class="code">types</span> is specified. Arrays <span class="code">a</span> and <span class="code">types</span> must be of the same size and
            interval variable <span class="code">a[i]</span> will have type <span class="code">types[i]</span> in the sequence variable. 
            You can specify a <span class="code">name</span> of your own choice.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalVar.htm">IntervalVar<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">
             This method creates an interval variable.  The start, end and size of the new interval variable range from 0 to the constant
            <span class="code">CP.IntervalMax</span>.  If you need an optional interval
            variable, you need to use the method <span class="code">SetOptional</span>.  As no intensity function is specified,
            the size of the interval variable will be equal to its length. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalVar_1.htm">IntervalVar(Int32)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an interval variable.  The start and end of the new interval variable range from 0 to the constant
            <span class="code">CP.IntervalMax</span>.  The size of the new interval variable is fixed and equal to <span class="code">sz</span>. The
            created interval variable is <em>present</em>; if you need an optional interval variable, you need to use the
            method <span class="code">SetOptional</span>.  As no intensity function is specified, the size of the interval
            variable will be equal to its length.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalVar_5.htm">IntervalVar(String)</a>
              </td>
              <td>
                <div class="summary">
             This method creates an interval variable.  The start, end and size of the new interval variable range from 0 to the constant
            <span class="code">CP.IntervalMax</span>.  If you need an optional interval
            variable, you need to use the method <span class="code">SetOptional</span>.  As no intensity function is specified,
            the size of the interval variable will be equal to its length.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalVar_2.htm">IntervalVar(Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an interval variable.  The start and end of the new interval variable range from 0 to the constant
            <span class="code">CP.IntervalMax</span>.  The size of the new interval variable ranges from <span class="code">szmin</span> to
            <span class="code">szmax</span>. By default, the created interval variable is <em>present</em> but it can be made optional by
            passing a true value (<span class="code">True</span>) for <span class="code">opt</span>. As no intensity function is specified,
            the size of the interval variable will be equal to its length.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalVar_4.htm">IntervalVar(Int32, String)</a>
              </td>
              <td>
                <div class="summary">
             This method creates an interval variable.  The start and end of the new interval variable range from 0 to the constant
            <span class="code">CP.IntervalMax</span>.  The size of the new interval variable is fixed and equal to <span class="code">sz</span>. The
            created interval variable is <em>present</em>; if you need an optional interval variable, you need to use the
            method <span class="code">SetOptional</span>.  As no intensity function is specified, the size of the interval
            variable will be equal to its length.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntervalVar_3.htm">IntervalVar(Int32, Int32, Boolean, INumToNumStepFunction, Int32)</a>
              </td>
              <td>
                <div class="summary">
             This method creates an interval variable.  The start and end of the new interval variable range from 0 to the constant
            <span class="code">CP.IntervalMax</span>.  The size of the new interval variable ranges from <span class="code">szmin</span> to
            <span class="code">szmax</span>. By default, the created interval variable is <em>present</em> but it can be made optional by
            passing a true value (<span class="code">True</span>) for <span class="code">opt</span>. The intensity function is 
            <span class="code">intensity</span>. This intensity function is an integer step function expressed as a percentage (and so must
            bounded in the range [0,100]).
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntExpr.htm">IntExpr</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new IIntExpr from the IConstraint
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntExprArray.htm">IntExprArray</a>
              </td>
              <td>
                <div class="summary">Creates and returns an array of null expressions.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntTable.htm">IntTable</a>
              </td>
              <td>
                <div class="summary">Creates and returns a new table <span class="code">table</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntValueChooser.htm">IntValueChooser(IValueSelector)</a>
              </td>
              <td>
                <div class="summary">
            This method returns an IIntValueChooser made with the IValueSelector arg.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntValueChooser_1.htm">IntValueChooser(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IValueSelector<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method returns an IIntValueChooser made with the array of IValueSelector arg.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntVar.htm">IntVar(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">Creates and returns a new integer variable with a domain of possible values.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntVar_1.htm">IntVar(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a new integer variable with a domain of possible values and a name.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntVarChooser.htm">IntVarChooser(IVarSelector)</a>
              </td>
              <td>
                <div class="summary">
            This method returns an IIntVarChooser made with the IVarSelector arg.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IntVarChooser_1.htm">IntVarChooser(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IVarSelector<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method returns an IIntVarChooser made with the array of IVarSelector arg.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Inverse.htm">Inverse</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns an inverse constraint. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsAbsent_1.htm">IsAbsent(String)</a>
              </td>
              <td>
                <div class="summary">
             Checks whether an interval variable with the specified name is currently set to be absent.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsAbsent.htm">IsAbsent(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">This method returns true if and only if interval variable 
             <span class="code">a</span> is absent in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsFixed.htm">IsFixed(ICumulFunctionExpr)</a>
              </td>
              <td>
                <div class="summary">This function indicates whether the cumul function
            expression <span class="code">f</span> takes on a particular value as
            maintained by the invoking <span class="code">CP</span> instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsFixed_1.htm">IsFixed(IIntervalSequenceVar)</a>
              </td>
              <td>
                <div class="summary">This method indicates if the domain of the interval sequence variable <span class="code">seq</span> 
            takes on a particular value as maintained by the invoking <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span> instance.
            An interval sequence variable is said to be fixed if and only if all the interval variables
            of the sequence are either absent or ordered. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsFixed_2.htm">IsFixed(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">This method indicates if the domain of <span class="code">a</span> takes 
             on a particular value as maintained by the invoking <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span> 
             instance. An interval variable is said to be fixed if and only if it is 
             either absent or present with fixed start, end and size value.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsFixed_3.htm">IsFixed(INumVar)</a>
              </td>
              <td>
                <div class="summary">
            This method indicates if the domain of <span class="code">var</span> takes on a particular value as maintained by the
            invoking <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span> instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsFixed_4.htm">IsFixed(IStateFunction)</a>
              </td>
              <td>
                <div class="summary">
            This method indicates if the state function
            <span class="code">f</span> takes on a particular value as
            maintained by the invoking <span class="code">CP</span> instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsInDomain.htm">IsInDomain</a>
              </td>
              <td>
                <div class="summary">
            This method indicates whether <span class="code">value</span> is contained in the current domain of
            <span class="code">var</span> as maintained by the invoking <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span> instance. An assertion is violated if
            <span class="code">var</span> is not of integral type.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Isomorphism.htm">Isomorphism(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an isomorphism constraint between the set of interval variables in 
            the array <span class="code">domain</span> and the set of interval variables in the array <span class="code">intervals</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Isomorphism_3.htm">Isomorphism(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an isomorphism constraint between the set of interval variables in 
            the array <span class="code">domain</span> and the set of interval variables in the array <span class="code">intervals</span>. 
            The set of integer expressions in the array <span class="code">map</span> is the indexer from <span class="code">intervals</span>
            to <span class="code">domain</span> with the default index value for absent intervals <span class="code">absVal</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Isomorphism_1.htm">Isomorphism(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an isomorphism constraint between the set of interval variables in 
            the array <span class="code">domain</span> and the set of interval variables in the array <span class="code">intervals</span>. 
            The set of integer expressions in the array <span class="code">map</span> is the indexer from <span class="code">intervals</span>
            to <span class="code">domain</span> with the default index value for absent intervals <span class="code">absVal</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Isomorphism_2.htm">Isomorphism(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Int32, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an isomorphism constraint between the set of interval variables in 
            the array <span class="code">domain</span> and the set of interval variables in the array <span class="code">intervals</span>. 
            The set of integer expressions in the array <span class="code">map</span> is the indexer from <span class="code">intervals</span>
            to <span class="code">domain</span> with the default index value for absent intervals <span class="code">absVal</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsPresent_1.htm">IsPresent(String)</a>
              </td>
              <td>
                <div class="summary">
             Checks whether an interval variable with the specified name is currently set to be present.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_IsPresent.htm">IsPresent(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">This method returns true if and only if interval variable 
             <span class="code">a</span> is present in the invoking instance of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.   </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Last.htm">Last</a>
              </td>
              <td>
                <div class="summary">This function returns a constraint that states that whenever
            interval variable <span class="code">a</span> is present, it must be ordered
            last in the sequence variable <span class="code">seq</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Le_5.htm">Le(Int32, ICumulFunctionExpr)</a>
              </td>
              <td>
                <div class="summary">
             This function returns a constraint that states that the value of cumul function expression
            <span class="code">f</span> should never be less than than <span class="code">vmin</span>.
            </div> (Overrides <span class="nolink">IloModelerImplLe(Int32, ICumulFunctionExpr)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Le_6.htm">Le(Int32, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">v &lt;= e</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Le.htm">Le(ICumulFunctionExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that the value of cumul function expression
            <span class="code">f</span> should never be greater than <span class="code">vmax</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Le_1.htm">Le(ICumulFunctionExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that the value of cumul function expression
            <span class="code">f</span> should never be greater than <span class="code">vmax</span>.
            </div> (Overrides <span class="nolink">IloModelerImplLe(ICumulFunctionExpr, Int32)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Le_2.htm">Le(IIntExpr, ICumulFunctionExpr)</a>
              </td>
              <td>
                <div class="summary">
             This function returns a constraint that states that the value of cumul function expression
            <span class="code">f</span> should never be less than than <span class="code">vmin</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Le_3.htm">Le(IIntExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e1 &lt;= e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Le_4.htm">Le(IIntExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e &lt;= v</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_LengthEval.htm">LengthEval(IIntervalVar, INumToNumSegmentFunction)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a numerical expression that represents the
            value of function <span class="code">f</span> evaluated on the length of interval
            variable <span class="code">a</span> whenever the interval variable is
            present. When the interval variable is absent, it returns <span class="code">0</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_LengthEval_1.htm">LengthEval(IIntervalVar, INumToNumSegmentFunction, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a numerical expression that represents the
            value of function <span class="code">f</span> evaluated on the length of interval
            variable <span class="code">a</span> whenever the interval variable is
            present. When the interval variable is absent, it returns the
            constant numerical value <span class="code">absVal</span> (by default: 0).
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_LengthOf.htm">LengthOf(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            length of interval variable <span class="code">a</span> whenever the interval
            variable is present. When the interval variable is absent, it
            returns <span class="code">0</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_LengthOf_1.htm">LengthOf(IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            length of interval variable <span class="code">a</span> whenever the interval
            variable is present. When the interval variable is absent, it
            returns the constant integer value <span class="code">absVal</span> (by default:
            0).
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_LengthOfNext.htm">LengthOfNext(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            length of the interval variable that is next to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the last interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
            returns 0.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_LengthOfNext_1.htm">LengthOfNext(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            length of the interval variable that is next to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the last interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
            returns the constant integer value <span class="code">absVal</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_LengthOfPrevious.htm">LengthOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            length of the interval variable that is previous to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the first interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
            returns 0.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_LengthOfPrevious_1.htm">LengthOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            length of the interval variable that is previous to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the first interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
            returns the constant integer value <span class="code">absVal</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Lexicographic.htm">Lexicographic</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a constraint which maintains two arrays to be lexicographically ordered.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Log.htm">Log</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">log(e)</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Lt_2.htm">Lt(Int32, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">v &lt; e</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Lt.htm">Lt(IIntExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e1 &lt; e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Lt_1.htm">Lt(IIntExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e &lt; v</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Max.htm">Max(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">max(e)</span>.
            </div> (Overrides <span class="nolink">IloModelerImplMax(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Max_1.htm">Max(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">max(e)</span>.
            </div> (Overrides <span class="nolink">IloModelerImplMax(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Maximize.htm">Maximize(IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates a maximization objective.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Maximize_1.htm">Maximize(IMultiCriterionExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates a maximization  multi-criteria objective.
            </div>
              </td>
            </tr>
            <tr data="protected;inherited;notNetfw;">
              <td>
                <img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" />
              </td>
              <td>
                <span class="nolink">MemberwiseClone</span>
              </td>
              <td>
                <div class="summary">Creates a shallow copy of the current <span class="nolink">Object</span>.</div> (Inherited from <span class="nolink">Object</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Min.htm">Min(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">min(e)</span>.
            </div> (Overrides <span class="nolink">IloModelerImplMin(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Min_1.htm">Min(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">min(e)</span>.
            </div> (Overrides <span class="nolink">IloModelerImplMin(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Minimize.htm">Minimize(IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates a minimization objective.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Minimize_1.htm">Minimize(IMultiCriterionExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates a minimization multi-criteria objective.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Model.htm">Model</a>
              </td>
              <td>
                <div class="summary">Creates and returns a new empty model.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Modulo.htm">Modulo</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the modulo expression <span class="code">e % r</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Neq_3.htm">Neq(Int32, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">v != e</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Neq.htm">Neq(IConstraint, IConstraint)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">c1 &lt;=&gt; !c2</span>; that is, the truth values
            of <span class="code">c1</span> and <span class="code">c2</span> should be different.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Neq_1.htm">Neq(IIntExpr, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e1 != e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Neq_2.htm">Neq(IIntExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new constraint <span class="code">e != v</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Next.htm">Next</a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NoOverlap.htm">NoOverlap(IIntervalSequenceVar)</a>
              </td>
              <td>
                <div class="summary">
             This constructor creates a no-overlap constraint on the
             sequence variable <span class="code">seq</span>. This constraint states that the
             interval variables of the sequence do not overlap and that the
             order of intervals in the sequence is the order implied by the
             relative position of the start and end points of the
             non-overlapping intervals.
            
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NoOverlap_5.htm">NoOverlap(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a no-overlap constraint on the set of
            interval variables defined by array <span class="code">a</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NoOverlap_1.htm">NoOverlap(IIntervalSequenceVar, ITransitionDistance)</a>
              </td>
              <td>
                <div class="summary">
             This constructor creates a no-overlap constraint on the
             sequence variable <span class="code">seq</span>. This constraint states that the
             interval variables of the sequence do not overlap and that the
             order of intervals in the sequence is the order implied by the
             relative position of the start and end points of the
             non-overlapping intervals. A transition distance
             <span class="code">tdist</span> is used to specify a minimal distance
             between two interval variables in the sequence. The transition 
             distance holds between an interval and all its successors in the 
             sequence.
            
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NoOverlap_6.htm">NoOverlap(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a no-overlap constraint on the set of
            interval variables defined by array <span class="code">a</span>. By default, the name of
            the no-overlap constraint is the empty string, but you can specify
            a <span class="code">name</span> of your own choice.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NoOverlap_2.htm">NoOverlap(IIntervalSequenceVar, ITransitionDistance, Boolean)</a>
              </td>
              <td>
                <div class="summary">
             This constructor creates a no-overlap constraint on the
             sequence variable <span class="code">seq</span>. This constraint states that the
             interval variables of the sequence do not overlap and that the
             order of intervals in the sequence is the order implied by the
             relative position of the start and end points of the
             non-overlapping intervals. A transition distance
             <span class="code">tdist</span> is used to specify a minimal distance
             between two interval variables in the sequence. If <span class="code">direct</span> is
             true, the transition distance holds between an interval and its
             immediate successor in the sequence otherwise, if
             <span class="code">direct</span> is false, the transition distance holds
             between an interval and all its successors in the sequence.
            
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NoOverlap_4.htm">NoOverlap(IIntervalSequenceVar, ITransitionDistance, String)</a>
              </td>
              <td>
                <div class="summary">
             This constructor creates a no-overlap constraint on the
             sequence variable <span class="code">seq</span>. This constraint states that the
             interval variables of the sequence do not overlap and that the
             order of intervals in the sequence is the order implied by the
             relative position of the start and end points of the
             non-overlapping intervals. A transition distance
             <span class="code">tdist</span> is used to specify a minimal distance
             between two interval variables in the sequence.  
             The transition distance holds between an interval and all its 
             successors in the sequence. By default, the
             name of the no-overlap constraint is the empty string, but you
             can specify a <span class="code">name</span> of your own choice.
            
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NoOverlap_3.htm">NoOverlap(IIntervalSequenceVar, ITransitionDistance, Boolean, String)</a>
              </td>
              <td>
                <div class="summary">
             This constructor creates a no-overlap constraint on the
             sequence variable <span class="code">seq</span>. This constraint states that the
             interval variables of the sequence do not overlap and that the
             order of intervals in the sequence is the order implied by the
             relative position of the start and end points of the
             non-overlapping intervals. A transition distance
             <span class="code">tdist</span> is used to specify a minimal distance
             between two interval variables in the sequence.  If <span class="code">direct</span> is
             true, the transition distance holds between an interval and its
             immediate successor in the sequence otherwise, if
             <span class="code">direct</span> is false, the transition distance holds
             between an interval and all its successors in the sequence. By default, the
             name of the no-overlap constraint is the empty string, but you
             can specify a <span class="code">name</span> of your own choice.
            
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumExprArray.htm">NumExprArray</a>
              </td>
              <td>
                <div class="summary">Creates and returns an array of null expressions.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumSegmentFunction.htm">NumToNumSegmentFunction<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a piecewise linear function that is constant. It is defined everywhere
            with value <span class="code">0</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumSegmentFunction_1.htm">NumToNumSegmentFunction(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a piecewise linear function defined everywhere 
            whose segments are defined by the two argument arrays <span class="code">x</span> and <span class="code">v</span>. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumSegmentFunctionCursor.htm">NumToNumSegmentFunctionCursor</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a cursor to inspect piecewise linear function <span class="code">f</span>. 
            This cursor lets you iterate forward or backward over the steps of the function. 
            The cursor initially specifies the step of the function that contains <span class="code">x</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumStepFunction.htm">NumToNumStepFunction</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a step function defined everywhere with value <span class="code">0</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_NumToNumStepFunctionCursor.htm">NumToNumStepFunctionCursor</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a cursor to inspect step function <span class="code">f</span>. 
            This cursor lets you iterate forward or backward over the steps of the function. 
            The cursor initially specifies the step of the function that contains <span class="code">x</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Output.htm">Output</a>
              </td>
              <td>
                <div class="summary">Returns the output stream of the invoking <span class="code">CP</span> object. This stream is used by <span class="code">CP</span> for printing logging information.  It can be set with the method <span class="code">CP.SetOut</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_OverlapLength.htm">OverlapLength(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
             This function returns an integer expression that represents the
            length of the overlap of interval variable <span class="code">a1</span> and
            interval variable <span class="code">a2</span> whenever interval variables
            <span class="code">a1</span> and <span class="code">a2</span> are present. When interval
            variable <span class="code">a1</span> or <span class="code">a2</span> is absent, the function
            returns zero.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_OverlapLength_1.htm">OverlapLength(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
             This function returns an integer expression that represents the
            length of the overlap of interval variable <span class="code">a1</span> and
            interval variable <span class="code">a2</span> whenever interval variables
            <span class="code">a1</span> and <span class="code">a2</span> are present. When interval
            variable <span class="code">a1</span> or <span class="code">a2</span> is absent, the function
            returns the constant integer value <span class="code">absVal</span>.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_OverlapLength_2.htm">OverlapLength(IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
             This function returns an integer expression that represents the
            length of the overlap of interval variable <span class="code">a</span> and
            constant interval <span class="code">[start, end)</span> whenever interval
            variable <span class="code">a</span> is present. When interval variable
            <span class="code">a</span> is absent, the function returns zero.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_OverlapLength_3.htm">OverlapLength(IIntervalVar, Int32, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
             This function returns an integer expression that represents the
            length of the overlap of interval variable <span class="code">a</span> and
            constant interval <span class="code">[start, end)</span> whenever interval
            variable <span class="code">a</span> is present. When interval variable
            <span class="code">a</span> is absent, the function returns the constant integer
            value <span class="code">absVal</span>.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Pack.htm">Pack(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a pack constraint which maintains the load of a set of containers or bins, given a set of
            weighted items and an assignment of items to containers. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Pack_1.htm">Pack(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns a pack constraint which maintains the load of a set of containers or bins, given a set of
            weighted items and an assignment of items to containers. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_PiecewiseLinear.htm">PiecewiseLinear(INumExpr, Double, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function creates an expression to represent a continuous or discontinuous 
            piecewise linear function <em>f</em> of the variable <em>e</em>. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_PiecewiseLinear_1.htm">PiecewiseLinear(INumExpr, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double, Double)</a>
              </td>
              <td>
                <div class="summary">
             This function creates an expression to represent a continuous or discontinuous 
             piecewise linear function <em>f</em> of the variable <em>e</em>. 
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_PiecewiseLinearFunction.htm">PiecewiseLinearFunction(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double, Double)</a>
              </td>
              <td>
                <div class="summary">
            This method builds an instance of piecewise linear function defined everywhere.
            The array <span class="code">point</span> contains the <em>n</em> breakpoints of the
            function such that <em>point [i-1] &lt;= point [i] for i = 1, . . ., n-1</em>. The array <span class="code">slope</span>
            contains the <em>n+1</em> slopes of the <em>n+1</em> segments of the function. The values <span class="code">a</span> and
            <span class="code">fa</span> must be coordinates of a point such that <span class="code">fa = f(a)</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_PiecewiseLinearFunction_1.htm">PiecewiseLinearFunction(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double, Double, String)</a>
              </td>
              <td>
                <div class="summary">
            This method builds an instance of piecewise linear function defined everywhere.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Power_2.htm">Power(Double, INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">e1 ^ e2</span>c&gt;.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Power.htm">Power(INumExpr, INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">e1 ^ e2</span>c&gt;.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Power_1.htm">Power(INumExpr, Int32)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">e1 ^ e2</span>c&gt;.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_PresenceOf.htm">PresenceOf</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that interval
            variable <span class="code">a</span> is present. You must add this constraint
            to a model and extract the model for an algorithm in order for it
            to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Previous.htm">Previous</a>
              </td>
              <td>
                <div class="summary">This function returns a constraint that states that whenever
            both interval variables <span class="code">prev</span> and <span class="code">next</span> are
            present, interval variable <span class="code">prev</span> must be ordered
            immediately before interval variable <span class="code">next</span> in the
            sequence variable <span class="code">seq</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_PrintInformation.htm">PrintInformation<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td />
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_PrintInformation_1.htm">PrintInformation(TextWriter)</a>
              </td>
              <td>
                <div class="summary">
            This method displays statistics about the current
            state of the CP Optimizer instance using text writer <span class="code">s</span>.
            For more information, see <span class="code">{see cref='PrintInformation'}</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Prod_4.htm">Prod(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Returns an expression equal to the scalar product of <span class="code">values</span> and <span class="code">exps</span>, that is,
            <span class="code">values0*exps0 + values1*exps1 + ...</span></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Prod_5.htm">Prod(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Returns an expression equal to the scalar product of <span class="code">values</span> and <span class="code">exps</span>; that is,
            <span class="code">values0*exps0 + values1*exps1 + ...</span></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Prod.htm">Prod(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Returns an expression equal to the scalar product of <span class="code">values</span> and <span class="code">exps</span>, that is,
            <span class="code">exps10*exps20 + exps11*exps21 + ...</span></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Prod_1.htm">Prod(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Returns an expression equal to the scalar product of <span class="code">values</span> and <span class="code">exps</span>, that is,
            <span class="code">values0*exps0 + values1*exps1 + ...</span></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Prod_2.htm">Prod(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Returns an expression equal to the scalar product of <span class="code">values</span> and <span class="code">exps</span>, that is,
            <span class="code">exps10*exps20 + exps11*exps21 + ...</span></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Prod_3.htm">Prod(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            Returns an expression equal to the scalar product of <span class="code">values</span> and <span class="code">exps</span>, that is,
            <span class="code">values0*exps0 + values1*exps1 + ...</span></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Propagate.htm">Propagate<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">Propagates all constraints without a goal.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Propagate_1.htm">Propagate(IConstraint)</a>
              </td>
              <td>
                <div class="summary">
            Propagates a constraint
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Pulse.htm">Pulse(IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an elementary cumul function expression
            that,
            whenever interval variable <span class="code">a</span> is present, is
            equal to <span class="code">v</span> between the start and the end of
            interval variable <span class="code">a</span> and equal to <span class="code">0</span>
            everywhere else. When interval variable <span class="code">a</span> is absent,
            the function is the constant null function.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Pulse_2.htm">Pulse(Int32, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an elementary cumul function expression
            that is constant over a certain interval and null before that.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Pulse_1.htm">Pulse(IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This elementary cumul function expression,
            whenever interval variable <span class="code">a</span> is present, is
            equal to a value <span class="code">v</span> such that <span class="code">vmin &lt;= v &lt;=
            vmax</span> everywhere between the start and the end of interval
            variable <span class="code">a</span> and equal to <span class="code">0</span> everywhere
            else. The choice of the value <span class="code">v</span> in the range
            <span class="code">[vmin,vmax]</span> is a decision of the problem. When interval
            variable <span class="code">a</span> is absent, the function is the constant null
            function.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Quot_2.htm">Quot(Double, INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">e1 / e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Quot.htm">Quot(INumExpr, INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">e1 / e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Quot_1.htm">Quot(INumExpr, Double)</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns the new expression <span class="code">e1 / e2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Range.htm">Range</a>
              </td>
              <td>
                <div class="summary">
            Creates and returns an <span class="code">IRange</span> object. The new <span class="code">IRange</span> object is initialized to
            represent the constraint <span class="code">-b &lt;= expr &lt;= +b</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_RefineConflict.htm">RefineConflict<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">
             This method identifies a minimal conflict for the infeasibility of the 
             current model. Since the conflict is minimal, removal of any one of these 
             constraints will remove that particular cause for infeasibility. There may 
             be other conflicts in the model; consequently, repair of a given conflict 
             does not guarantee feasibility of the remaining model.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_RefineConflict_1.htm">RefineConflict(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IConstraint<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
             This method identifies a minimal conflict for the infeasibility of a subset 
             of the constraints of the current model. Since the conflict is minimal, removal 
             of any one of these constraints will remove that particular cause for infeasibility. 
             There may be other conflicts in the model; consequently, repair of a given conflict 
             does not guarantee feasibility of the remaining model.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_RefineConflict_2.htm">RefineConflict(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IConstraint<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
             This method identifies a minimal conflict for the infeasibility of a subset 
             of the constraints of the current model. Since the conflict is minimal, removal 
             of any one of these constraints will remove that particular cause for infeasibility. 
             There may be other conflicts in the model; consequently, repair of a given conflict 
             does not guarantee feasibility of the remaining model.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Restore.htm">Restore</a>
              </td>
              <td>
                <div class="summary">
            This method uses the invoking CP Optimizer to instantiate the variables in <span class="code">solution</span> with
            their saved values. The value of any objective added to the solution is not restored. If the solution does not
            violate any constraints of the model extracted by the invoking CP Optimizer, then <span class="code">IloTrue</span> is
            returned and the state of the constrained variables in CP Optimizer reflect those stored in
            <span class="code">solution</span>. Otherwise CP Optimizer's state remains unchanged and <span class="code">IloFalse</span> is
            returned.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SameCommonSubsequence.htm">SameCommonSubsequence(IIntervalSequenceVar, IIntervalSequenceVar)</a>
              </td>
              <td>
                <div class="summary">This function creates a same-common-subsequence constraint between sequence variables
             <span class="code">seq1</span> and <span class="code">seq2</span>.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SameCommonSubsequence_3.htm">SameCommonSubsequence(IIntervalSequenceVar, IIntervalSequenceVar, String)</a>
              </td>
              <td>
                <div class="summary">This function creates a same-common-subsequence constraint between sequence variables
            <span class="code">seq1</span> and <span class="code">seq2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SameCommonSubsequence_1.htm">SameCommonSubsequence(IIntervalSequenceVar, IIntervalSequenceVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">This function creates a same-common-subsequence constraint between sequence variables
            <span class="code">seq1</span> and <span class="code">seq2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SameCommonSubsequence_2.htm">SameCommonSubsequence(IIntervalSequenceVar, IIntervalSequenceVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">This function creates a same-common-subsequence constraint between sequence variables
            <span class="code">seq1</span> and <span class="code">seq2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SameSequence.htm">SameSequence(IIntervalSequenceVar, IIntervalSequenceVar)</a>
              </td>
              <td>
                <div class="summary">This function creates a same-sequence constraint between sequence variables
            <span class="code">seq1</span> and <span class="code">seq2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SameSequence_3.htm">SameSequence(IIntervalSequenceVar, IIntervalSequenceVar, String)</a>
              </td>
              <td>
                <div class="summary">This function creates a same-sequence constraint between sequence variables
            <span class="code">seq1</span> and <span class="code">seq2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SameSequence_1.htm">SameSequence(IIntervalSequenceVar, IIntervalSequenceVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">This function creates a same-sequence constraint between sequence variables
            <span class="code">seq1</span> and <span class="code">seq2</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SameSequence_2.htm">SameSequence(IIntervalSequenceVar, IIntervalSequenceVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">This function creates a same-sequence constraint between sequence variables
            <span class="code">seq1</span> and <span class="code">seq2</span>.
            Sequence variables <span class="code">seq1</span> and <span class="code">seq2</span> should be of the same size n.
            The mapping between interval variables of the two sequences is specified by arrays <span class="code">a1</span>
            and <span class="code">a2</span>. Arrays <span class="code">a1</span> and <span class="code">a2</span> should be of same size n.
            The constraint states that the two sequences <span class="code">seq1</span> and
            <span class="code">seq2</span> are identical modulo a mapping between intervals <span class="code">a1[i]</span> and
            <span class="code">a2[i]</span>. You can specify a <span class="code">name</span> of your own choice for the constraint.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SearchPhase.htm">SearchPhase(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalSequenceVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This constructor creates a search phase with an array of interval sequence 
            variables. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SearchPhase_1.htm">SearchPhase(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">This constructor creates a search phase with an array of interval variables.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SearchPhase_2.htm">SearchPhase(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method creates a search phase with an array of variables only. The variable and value choosers for
            these variables will be chosen by CP Optimizer search automatically.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SearchPhase_4.htm">SearchPhase(IIntVarChooser, IIntValueChooser)</a>
              </td>
              <td>
                <div class="summary">
            This method creates a search phase with a variable and a value chooser. The variables instantiated by this
            phase are those extracted to the <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span> instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SearchPhase_3.htm">SearchPhase(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, IIntVarChooser, IIntValueChooser)</a>
              </td>
              <td>
                <div class="summary">
            This method creates a search phase with an array of variables and value choosers. The phase will use
            <span class="code">varChooser</span> and <span class="code">valueChooser</span> to determine how to instantiate variables in
            <span class="code">vars</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectLargest.htm">SelectLargest(IIntValueEval)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of value assignments to a variable that selects all values having the largest
            evaluation according to the evaluator <span class="code">eval</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectLargest_2.htm">SelectLargest(IIntVarEval)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variables that selects 
            all variables having the largest evaluation
            according to the evaluator <span class="code">eval</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectLargest_4.htm">SelectLargest(Double, IIntValueEval)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of value assignments to a variable that selects at least <span class="code">minNumber</span>
            values having the largest evaluation according to the evaluator <span class="code">eval</span>. The parameter
            <span class="code">minNumber</span> must be at least 1.  
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectLargest_5.htm">SelectLargest(Double, IIntVarEval)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variables that selects at least <span class="code">minNumber</span> variables
            having the largest evaluation according to the evaluator <span class="code">eval</span>. The parameter <span class="code">minNumber</span>
            must be at least 1.  
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectLargest_1.htm">SelectLargest(IIntValueEval, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variable assignments that selects all domain values whose evaluations
            are in the range <span class="code">[max - tol, max]</span>, where <span class="code">max</span> is is the maximum valuation by
            <span class="code">eval</span> over the domain values to be evaluated. The parameter <span class="code">tol</span> must be non-negative.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectLargest_3.htm">SelectLargest(IIntVarEval, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variables that selects all 
            variables whose evaluations are in the
            range <span class="code">[max - tol, max]</span>, where <span class="code">max</span> is is the maximum valuation by <span class="code">eval</span> over
            the variables to be evaluated. The parameter <span class="code">tol</span> must be non-negative.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectRandomValue.htm">SelectRandomValue</a>
              </td>
              <td>
                <div class="summary">This function returns a selector of integer variable value assignments that selects a domain value randomly. It selects only one value.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectRandomVar.htm">SelectRandomVar</a>
              </td>
              <td>
                <div class="summary">This function returns a selector of integer variables that selects a variable randomly from those available. It selects only one variable.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectSmallest.htm">SelectSmallest(IIntValueEval)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of value assignments to a variable that selects all values having the smallest
            evaluation according to the evaluator <span class="code">eval</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectSmallest_2.htm">SelectSmallest(IIntVarEval)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variables that selects all variables having the smallest evaluation
            according to the evaluator <span class="code">eval</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectSmallest_4.htm">SelectSmallest(Double, IIntValueEval)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variable assignments that selects at least <span class="code">minNumber</span>
            domain values having the smallest evaluation according to the evaluator <span class="code">eval</span>. The parameter
            <span class="code">minNumber</span> must be at least 1. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectSmallest_5.htm">SelectSmallest(Double, IIntVarEval)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variables that selects at least <span class="code">minNumber</span> variables
            having the smallest evaluation according to the evaluator <span class="code">eval</span>. The parameter <span class="code">minNumber</span>
            must be at least 1.  
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectSmallest_1.htm">SelectSmallest(IIntValueEval, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variable assignments that selects all domain values whose evaluations
            are in the range <span class="code">[min, min + tol]</span>, where <span class="code">min</span> is is the minimum valuation by
            <span class="code">eval</span> over the domain values to be evaluated. The parameter <span class="code">tol</span> must be non-negative.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SelectSmallest_3.htm">SelectSmallest(IIntVarEval, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a selector of integer variables that selects all variables whose evaluations are in the
            range <span class="code">[min, min + tol]</span>, where <span class="code">min</span> is is the minimum valuation by <span class="code">eval</span> over
            the variables to be evaluated. The parameter <span class="code">tol</span> must be non-negative.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetError.htm">SetError</a>
              </td>
              <td>
                <div class="summary">Sets the error stream of the invoking <span class="code">CP</span> object. After this call, all errors will be output via the new stream.  Passing <span class="code">null</span> as the new output stream will turn off all errors.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetOut.htm">SetOut</a>
              </td>
              <td>
                <div class="summary">Sets the default output stream of the invoking <span class="code">CP</span> object.  After this call, all logging output will be output via the new stream.  Passing <span class="code">null</span> as the new output stream will turn off all logging output.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetParameter.htm">SetParameter(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>DoubleParam, CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ParameterValues)</a>
              </td>
              <td>
                <div class="summary">
            This method sets the floating-point parameter <span class="code">param</span> to the value <span class="code">value</span> in the
            invoked <span class="code">CP</span> instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetParameter_1.htm">SetParameter(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>DoubleParam, Double)</a>
              </td>
              <td>
                <div class="summary">
            This method sets the floating-point parameter <span class="code">param</span> to the value <span class="code">value</span> in the
            invoked <span class="code">CP</span> instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetParameter_2.htm">SetParameter(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>IntParam, CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ParameterValues)</a>
              </td>
              <td>
                <div class="summary">
            This method sets the integer parameter <span class="code">param</span> to the value <span class="code">value</span> in the invoked <span class="code">CP</span>
            instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetParameter_3.htm">SetParameter(CP<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>IntParam, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This method sets the integer parameter <span class="code">param</span> to the value <span class="code">value</span> in the invoked <span class="code">CP</span>
            instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetSearchPhases.htm">SetSearchPhases<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">
            This method clears the search phases set on the <span class="code">CP</span> instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetSearchPhases_1.htm">SetSearchPhases(ISearchPhase)</a>
              </td>
              <td>
                <div class="summary">
            This method specifies a search phase that need to be used to 
            instantiate variables in CP Optimizer embedded search. Search will be invoked by a call 
            to the function <span class="code">CP.Solve()</span> or <span class="code">CP.StartNewSearch()</span>. 
            The method <span class="code">void CP.SetSearchPhases()</span> can be used to clear the search phases 
            set on the <span class="code">CP</span> instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetSearchPhases_2.htm">SetSearchPhases(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>ISearchPhase<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method solves specifies an array of search phases that need to be used to 
            instantiate variables in CP Optimizer embedded search. Search will be invoked by a call 
            to the function <span class="code">CP.Solve()</span> or <span class="code">CP.StartNewSearch()</span>. 
            The method <span class="code">void CP.SetSearchPhases()</span> can be used to clear the search phases 
            set on the <span class="code">CP</span> instance.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetStartingPoint.htm">SetStartingPoint</a>
              </td>
              <td>
                <div class="summary">
             This method sets solution <span class="code">sp</span> as the new
             starting point for subsequent searches of the invoking
             CP Optimizer engine.
            
             For more information on starting points, see the
             <em>Starting Point</em> concept.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SetWarning.htm">SetWarning</a>
              </td>
              <td>
                <div class="summary">Sets the warning stream of the invoking <span class="code">CP</span> object. After this call, all warnings will be output via the new stream.  Passing <span class="code">null</span> as the new output stream will turn off all warnings.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SizeEval.htm">SizeEval(IIntervalVar, INumToNumSegmentFunction)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a numerical expression that represents the
            value of function <span class="code">f</span> evaluated on the size of interval
            variable <span class="code">a</span> whenever the interval variable is
            present. When the interval variable is absent, it returns <span class="code">0</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SizeEval_1.htm">SizeEval(IIntervalVar, INumToNumSegmentFunction, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a numerical expression that represents the
            value of function <span class="code">f</span> evaluated on the size of interval
            variable <span class="code">a</span> whenever the interval variable is
            present. When the interval variable is absent, it returns the
            constant numerical value <span class="code">absVal</span> (by default: 0).
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SizeOf.htm">SizeOf(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            size of interval variable <span class="code">a</span> whenever the interval
            variable is present. When the interval variable is absent, it
            returns <span class="code">0</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SizeOf_1.htm">SizeOf(IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            size of interval variable <span class="code">a</span> whenever the interval
            variable is present. When the interval variable is absent, it
            returns the constant integer value <span class="code">absVal</span> (by default:
            0).
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SizeOfNext.htm">SizeOfNext(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            size of the interval variable that is next to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the last interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
            returns 0.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SizeOfNext_1.htm">SizeOfNext(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            size of the interval variable that is next to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the last interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
            returns the constant integer value <span class="code">absVal</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SizeOfPrevious.htm">SizeOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            size of the interval variable that is previous to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the first interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
            returns 0.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_SizeOfPrevious_1.htm">SizeOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            size of the interval variable that is previous to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the first interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
            returns the constant integer value <span class="code">absVal</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Solution.htm">Solution</a>
              </td>
              <td>
                <div class="summary">This method creates and returns an instance of ISolution. 
            You can define what variables are stored in the solution by adding 
            variables direction to the solution returned.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Solve.htm">Solve</a>
              </td>
              <td>
                <div class="summary">
            This method solves a problem using CP Optimizer's built-in strategy. The built-in 
            strategy is determined
            by setting the parameter <span class="code">CP.SearchType</span>. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Span.htm">Span(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method creates a span constraint between interval variable <span class="code">a</span> and the set
            of interval variables in the array <span class="code">bs</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Span_1.htm">Span(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates a span constraint between interval variable <span class="code">a</span> and the set
            of interval variables in the array <span class="code">bs</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StandardDeviation.htm">StandardDeviation(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This function creates a new constrained numeric expression which is equal to the standard deviation of the values
            of the variables in the array <span class="code">exprs</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StandardDeviation_1.htm">StandardDeviation(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Double, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function creates a new constrained numeric expression which is equal to the standard deviation of the values
            of the variables in the array <span class="code">exprs</span>.  <p> In addition, the mean of the values of <span class="code">exprs</span>
            will be enforced to lie in the range [<span class="code">meanLB</span>, <span class="code">meanUB</span>]</p></div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartAtEnd.htm">StartAtEnd(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-start(a)</span>between the
            start of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be equal to <span class="code">0</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartAtEnd_1.htm">StartAtEnd(IIntervalVar, IIntervalVar, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-start(a)</span>between the
            start of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartAtEnd_2.htm">StartAtEnd(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-start(a)</span>between the
            start of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartAtStart.htm">StartAtStart(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-start(a)</span>between the
            start of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be equal to <span class="code">0</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartAtStart_1.htm">StartAtStart(IIntervalVar, IIntervalVar, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-start(a)</span>between the
            start of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartAtStart_2.htm">StartAtStart(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-start(a)</span>between the
            start of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartBeforeEnd.htm">StartBeforeEnd(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-start(a)</span> between the
            start of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">0</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartBeforeEnd_1.htm">StartBeforeEnd(IIntervalVar, IIntervalVar, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-start(a)</span>between the
            start of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartBeforeEnd_2.htm">StartBeforeEnd(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">end(b)-start(a)</span> between the
            start of interval <span class="code">a</span> and the end of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartBeforeStart.htm">StartBeforeStart(IIntervalVar, IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-start(a)</span> between the
            start of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">0</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartBeforeStart_1.htm">StartBeforeStart(IIntervalVar, IIntervalVar, IIntExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-start(a)</span> between the
            start of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartBeforeStart_2.htm">StartBeforeStart(IIntervalVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a constraint that states that whenever
            both interval variables <span class="code">a</span> and <span class="code">b</span> are
            present, the distance <span class="code">start(b)-start(a)</span> between the
            start of interval <span class="code">a</span> and the start of interval
            <span class="code">b</span> must be greater than or equal to <span class="code">z</span>. You must add
            this constraint to a model and extract the model for an algorithm
            in order for it to be taken into account.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartEval.htm">StartEval(IIntervalVar, INumToNumSegmentFunction)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a numerical expression that represents the
            value of function <span class="code">f</span> evaluated on the start of interval
            variable <span class="code">a</span> whenever the interval variable is
            present. When the interval variable is absent, it returns <span class="code">0</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartEval_1.htm">StartEval(IIntervalVar, INumToNumSegmentFunction, Double)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a numerical expression that represents the
            value of function <span class="code">f</span> evaluated on the start of interval
            variable <span class="code">a</span> whenever the interval variable is
            present. When the interval variable is absent, it returns the
            constant numerical value <span class="code">absVal</span> (by default: 0).
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartNewSearch.htm">StartNewSearch</a>
              </td>
              <td>
                <div class="summary">This method starts a new search using the built-in strategy of <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>. It should be used in conjunction with the functions <span class="code"><a href="M_ILOG_CP_CP_Next.htm">Next<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a></span> and <span class="code"><a href="M_ILOG_CP_CP_EndSearch.htm">EndSearch<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a></span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartOf.htm">StartOf(IIntervalVar)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            start of interval variable <span class="code">a</span> whenever the interval
            variable is present. When the interval variable is absent, it
            returns <span class="code">0</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartOf_1.htm">StartOf(IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            start of interval variable <span class="code">a</span> whenever the interval
            variable is present. When the interval variable is absent, it
            returns the constant integer value <span class="code">absVal</span> (by default:
            0).
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartOfNext.htm">StartOfNext(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            start of the interval variable that is next to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the last interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
            returns 0.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartOfNext_1.htm">StartOfNext(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            start of the interval variable that is next to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the last interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
            returns the constant integer value <span class="code">absVal</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartOfPrevious.htm">StartOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            start of the interval variable that is previous to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the first interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
            returns 0.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StartOfPrevious_1.htm">StartOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            start of the interval variable that is previous to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the first interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
            returns the constant integer value <span class="code">absVal</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StateFunction.htm">StateFunction<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">
            This method creates an instance of state function.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StateFunction_3.htm">StateFunction(String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an instance of state function.
            You can specify a <span class="code">name</span> of your own
            choice. 
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StateFunction_1.htm">StateFunction(ITransitionDistance)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an instance of state function with transition distance
            <span class="code">tdist</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StateFunction_2.htm">StateFunction(ITransitionDistance, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates an instance of state function with transition distance
            <span class="code">tdist</span>. You can specify a <span class="code">name</span> of your own choice.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StaticLex.htm">StaticLex(INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function defines a multicriteria expression for lexicographic ordering.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StaticLex_4.htm">StaticLex(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This function defines a multicriteria expression for lexicographic ordering.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StaticLex_1.htm">StaticLex(INumExpr, INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function defines a multicriteria expression for lexicographic ordering.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StaticLex_5.htm">StaticLex(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            This function defines a multicriteria expression for lexicographic ordering.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StaticLex_2.htm">StaticLex(INumExpr, INumExpr, INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function defines a multicriteria expression for lexicographic ordering.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StaticLex_3.htm">StaticLex(INumExpr, INumExpr, INumExpr, INumExpr)</a>
              </td>
              <td>
                <div class="summary">
            This function defines a multicriteria expression for lexicographic ordering.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Step.htm">Step</a>
              </td>
              <td>
                <div class="summary">
            This function returns an elementary cumul function expression
            that is equal to <span class="code">0</span> before point <span class="code">t</span> and
            equal to <span class="code">v</span> after point <span class="code">t</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StepAtEnd.htm">StepAtEnd(IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an elementary cumul function expression
            that is constant over a certain interval and null before that.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StepAtEnd_1.htm">StepAtEnd(IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an elementary cumul function expression
            that, whenever interval variable <span class="code">a</span> is present, is
            equal to a <span class="code">0</span> before the end of <span class="code">a</span> and
            equal to a value <span class="code">v</span> such that <span class="code">vmin &lt;= v &lt;=
            vmax</span> after the end of <span class="code">a</span>. The choice of the
            value <span class="code">v</span> in the range <span class="code">[vmin,vmax]</span> is a
            decision of the problem. When interval variable <span class="code">a</span> is
            absent, the function is the constant null function.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StepAtStart.htm">StepAtStart(IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an elementary cumul function expression
            that is constant over a certain interval and null before that.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_StepAtStart_1.htm">StepAtStart(IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an elementary cumul function expression
            that, whenever interval variable <span class="code">a</span> is present, is
            equal to a <span class="code">0</span> before the start of <span class="code">a</span> and
            equal to a value <span class="code">v</span> such that <span class="code">vmin &lt;= v &lt;=
            vmax</span> after the start of <span class="code">a</span>. The choice of the
            value <span class="code">v</span> in the range <span class="code">[vmin,vmax]</span> is a
            decision of the problem. When interval variable <span class="code">a</span> is
            absent, the function is the constant null function.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Store.htm">Store</a>
              </td>
              <td>
                <div class="summary">
            This method stores the values of the objects added to <span class="code">solution</span> by examining their current
            values in the invoking <span class="code"><a href="T_ILOG_CP_CP.htm">CP</a></span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Strong.htm">Strong</a>
              </td>
              <td>
                <div class="summary">
             Gives a strengthening hint over a number of variables.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Sum_1.htm">Sum(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td> (Overrides <span class="nolink">IloModelerImplSum(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Sum_2.htm">Sum(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td> (Overrides <span class="nolink">IloModelerImplSum(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>INumExpr<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Sum.htm">Sum(ICumulFunctionExpr, ICumulFunctionExpr)</a>
              </td>
              <td>
                <div class="summary">
             This operator returns a cumul function expression equal to the sum of its arguments.
             </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Synchronize.htm">Synchronize(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method creates a synchronization constraint between interval variable <span class="code">a</span>
            and the set of interval variables in the array <span class="code">bs</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Synchronize_1.htm">Synchronize(IIntervalVar, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntervalVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            This method creates a synchronization constraint between interval variable <span class="code">a</span>
            and the set of interval variables in the array <span class="code">bs</span>.
            </div>
              </td>
            </tr>
            <tr data="public;inherited;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <span class="nolink">ToString</span>
              </td>
              <td>
                <div class="summary">Returns a string that represents the current object.</div> (Inherited from <span class="nolink">Object</span>.)</td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_TransitionDistance.htm">TransitionDistance(Int32)</a>
              </td>
              <td>
                <div class="summary">
            This method returns an instance of transition distance of the specified size <span class="code">i</span>.
            Initially, the transition distance between any two indices is 0. You need to fill the transition distance using
             the method <span class="code">setValue</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_TransitionDistance_1.htm">TransitionDistance(Int32, String)</a>
              </td>
              <td>
                <div class="summary">
            This method returns an instance of transition distance of the specified size <span class="code">i</span>.
            Initially, the transition distance between any two indices is 0. You need to fill the transition distance using
            the method <span class="code">setValue</span>. You can specify a <span class="code">name</span> of your own choice.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_TransitionDistance_2.htm">TransitionDistance(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span><span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span><span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, String)</a>
              </td>
              <td>
                <div class="summary">
            This method returns an instance of transition distance. The 2-dimensional integer array
            argument <span class="code">dtable</span> gives the values of the transition distance.
            You can specify a <span class="code">name</span> of your own choice.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_TrueConstraint.htm">TrueConstraint</a>
              </td>
              <td>
                <div class="summary">Creates and returns a new constraint that is always true.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_TypeOfNext.htm">TypeOfNext(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            type of the interval variable that is next to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the last interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
            returns 0.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_TypeOfNext_1.htm">TypeOfNext(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            type of the interval variable that is next to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the last interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">lastVal</span>. When interval <span class="code">a</span> is absent, it
            returns the constant integer value <span class="code">absVal</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_TypeOfPrevious.htm">TypeOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            type of the interval variable that is previous to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the first interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
            returns 0.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_TypeOfPrevious_1.htm">TypeOfPrevious(IIntervalSequenceVar, IIntervalVar, Int32, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns an integer expression that represents the
            type of the interval variable that is previous to interval
            <span class="code">a</span> in sequence variable <span class="code">seq</span>. When
            interval <span class="code">a</span> is present and is the first interval of
            sequence <span class="code">seq</span>, it returns the constant integer value
            <span class="code">firstVal</span>. When interval <span class="code">a</span> is absent, it
            returns the constant integer value <span class="code">absVal</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Value.htm">Value</a>
              </td>
              <td>
                <div class="summary">This function returns a value evaluator. It returns as evaluation the value itself. This is useful to define instantiation strategies that choose the smallest or the largest value in a domain.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ValueImpact.htm">ValueImpact</a>
              </td>
              <td>
                <div class="summary">This function returns a value evaluator. The evaluation is the average reduction of the search space observed so far when instantiating the selected variable to the evaluated value. The greater the evaluation, the more space reduction this instantiation achieves. In general it is a good strategy to prefer a value having the smallest impact.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ValueIndex.htm">ValueIndex(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">This method is a shortcut to <span class="code">valueIndex(vals, -1)</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ValueIndex_1.htm">ValueIndex(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Int32<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Int32)</a>
              </td>
              <td>
                <div class="summary">This function returns a value evaluator. The evaluation of each value is the index of the value in the array <span class="code">vals</span>. That is, the evaluation of <span class="code">valueArray[i]</span> is <span class="code">i</span>. If the value does not appear in the array, <span class="code">defaultEval</span> is the evaluation returned.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_ValueSuccessRate.htm">ValueSuccessRate</a>
              </td>
              <td>
                <div class="summary">This function returns a value evaluator. The evaluation is the success rate of instantiating the selected variable to the evaluated value. Assuming the selected variable has been instantiated to the evaluated value <span class="code">n</span> times so far and this has resulted in <span class="code">f</span> failures, the success rate is <span class="code">(n-f)/n</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_VarImpact.htm">VarImpact</a>
              </td>
              <td>
                <div class="summary">This function returns a variable evaluator. The evaluation is the the average reduction of the search space observed so far for this variable. The greater the evaluation, the more space reduction this variable achieves. In general, it is a good strategy to start with variable having the greatest impact in order to reduce the search space size.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_VarIndex.htm">VarIndex(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a>
              </td>
              <td>
                <div class="summary">
            This method is a shortcut to <span class="code">varIndex(vars, -1)</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_VarIndex_1.htm">VarIndex(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>IIntVar<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>, Int32)</a>
              </td>
              <td>
                <div class="summary">
            This function returns a variable evaluator. The evaluation of a variable is the index of the variable in the
            array <span class="code">vars</span>. That is, the evaluation of <span class="code">vars[i]</span> is <span class="code">i</span>. If the variable does not
            appear in the array, <span class="code">defaultEval</span> is the evaluation returned.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_VarLocalImpact.htm">VarLocalImpact<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">This method is a shortcut to <span class="code">varLocalImpact(-1)</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_VarLocalImpact_1.htm">VarLocalImpact(Int32)</a>
              </td>
              <td>
                <div class="summary">This function returns a variable evaluator. The evaluation is the impact of the variable computed at the current node of the search tree. This computation is made by probing on values from the domain of the variables. The parameter effort indicates how much effort sould be spent to compute this impact. When <span class="code">effort</span> is equal to -1, every value of the domain is probed otherwise the nunber of probes effort will increase as the effort value increases.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_VarSuccessRate.htm">VarSuccessRate</a>
              </td>
              <td>
                <div class="summary">This function returns a variable evaluator. The evaluation is the the success rate of the variable. Assuming the evaluated variable has been instantiated <span class="code">n</span> times so far and this has resulted in <span class="code">f</span> failures, the success rate is <span class="code">(n-f)/n</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_Warning.htm">Warning</a>
              </td>
              <td>
                <div class="summary">Returns the warning output stream of the invoking <span class="code">CP</span> object. This stream is used by <span class="code">CP</span> for printing warnings. It can be set with the method <span class="code">CP.SetWarning</span>.</div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_WriteConflict.htm">WriteConflict<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span><span class="fs">()</span></span></a>
              </td>
              <td>
                <div class="summary">
            This method can be used as a shorthand for
            <span class="code">cp.WriteConflict(cp.Output())</span>.
            </div>
              </td>
            </tr>
            <tr data="public;declared;notNetfw;">
              <td>
                <img src="../icons/pubmethod.gif" alt="Public method" title="Public method" />
              </td>
              <td>
                <a href="M_ILOG_CP_CP_WriteConflict_1.htm">WriteConflict(TextWriter)</a>
              </td>
              <td>
                <div class="summary">
            This method displays the current conflict. It will not display the 
            constraints that were initially specified as being part of the conflict and that 
            were consequently not refined by the conflict refiner (constraints not in the 
            array of constraints passed to <span class="code">RefineConflict</span> or constraints or 
            groups with preference 0).
            </div>
              </td>
            </tr>
          </table>
        </div>
        <h1 class="heading">See Also</h1>
        <div id="seeAlsoSection" class="section" name="collapseableSection" style="">
          <div class="seeAlsoStyle">
            <a href="T_ILOG_CP_CP.htm">CP Class</a>
          </div>
          <div class="seeAlsoStyle">
            <a href="N_ILOG_CP.htm">ILOG.CP Namespace</a>
          </div>
        </div>
      </div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" />
        </div>
        <A NAME="feedback"></A>
        <span id="fb" class="feedbackcss"></span>
        <p />© Copyright IBM Corp. 1987, 2017</div>
    </div>
  </body>
</html>